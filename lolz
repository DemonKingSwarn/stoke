#!/bin/bash
export LC_ALL=C
MPR='https://mpr.hunterwittenborn.com'
TMP="/tmp/lolz/"
if [[ ! -d /var/db/lolz ]]; then
	sudo mkdir -p /var/db/lolz
fi
# https://unix.stackexchange.com/a/567537/391386
version_greater_equal() {
	printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort
}

mark_upgrade() {
	upgradable+=("$1")
}

help_function() {
	echo "lolzy -- the stupid MPR helper"
	echo "lolz install (-y) -- installs a package"
	echo "lolz remove -- removes a package"
	echo "lolz upgrade -- upgrades packages"
	echo "lolz search -- searches for package"
}

function lolzy_message() {
	local MESSAGE_TYPE="${1}"
	local MESSAGE="${2}"
	local NC='\033[0m'
	local BRed='\033[1;31m'
	local BGreen='\033[1;32m'
	local BYellow='\033[1;33m'

	case ${MESSAGE_TYPE} in
		info) echo -e "[${BGreen}+${NC}] LOLZY: ${MESSAGE}";;
		warn) echo -e "[${BYellow}*${NC}] CRAP: ${MESSAGE}";;
		error) echo -e "[${BRed}!${NC}] GOSH DANG: ${MESSAGE}";;
		*) echo -e "[?] UNKNOWN: ${MESSAGE}";;
	esac
}

if ! command -v makedeb &>/dev/null; then
  lolzy_message error "makedeb does not exist"
  exit 69
fi

case "${1}" in
  install)
	shift
	if [[ $1 == "-y" ]]; then
		export NOEDIT=1
		shift
	fi
	INPUT="$*"
	for i in $INPUT; do
		URL="$MPR/cgit/aur.git/plain/PKGBUILD?h=$i"
		VERSION=$(curl -s "$MPR/rpc/?v=5&type=info&arg=$i" | jq -C '.results[0].Version' | tr -d '"') &
		if ! curl --output /dev/null --silent --head --fail "$URL"; then
			lolzy_message error "$INPUT does not exist"
			exit 69
		fi
		# it's about to get rough
		# get list of deps
		deps=( $(curl -s "$MPR/rpc/?v=5&type=info&arg=$i" | jq '.results[].Depends' | sed 's/\,//g' | sed 's/\[//g' | sed 's/\]//g' | tr -d '"') )
		# do a list of deps
		for z in "${deps[@]}"; do
			# if the apt search fails, go to MPR search, but if apt search works, add to list of apt deps
			if ! apt-cache search --names-only "$z" >/dev/null; then
				# if the package exists in the MPR, add it to the mprdeps list
				if curl --output /dev/null --silent --head --fail "$MPR/cgit/aur.git/plain/PKGBUILD?h=$z"; then
					mprdeps+=("$z")
				# else fail
				else
					lolzy_message error "$z is not a valid MPR or apt package"
					exit 69
				fi
			fi
		done
		if [[ ${#mprdeps[@]} -ne 0 ]]; then
			lolzy_message info "Installing MPR dependencies first"
			for i in ${mprdeps[@]}; do
				lolz install "$i"
			done
		fi
		lolzy_message info "Installing $i..."
		mkdir -p $TMP
		cd $TMP
		git clone --depth=1 --single-branch --branch=master "$MPR/$i.git"
		cd $(basename $i .git)
		if [[ -z $NOEDIT ]]; then
			if [[ -n $EDITOR ]]; then
				$EDITOR PKGBUILD
			elif [[ -n $VISUAL ]]; then
				$VISUAL PKGBUILD
			else
				sensible-editor PKGBUILD
			fi
		fi
		makedeb -si
		rm -rf $TMP &
		wait
		echo "$VERSION" | sudo tee /var/db/lolz/$i >/dev/null
	done
	exit
	;;
  remove)
	INPUT="$2"
	if [[ -f /var/db/lolz/$INPUT ]]; then
		sudo apt-get remove "$INPUT"
	else
		lolzy_message error "$INPUT is not a valid MPR package"
		exit 69
	fi
	;;
  upgrade)
	# get a list of packages installed by lolz
	for i in $(\ls -1aA /var/db/lolz); do
		# check if the local version is less than the remote version and if so, mark it for upgrade
		if ! version_greater_equal "$(cat /var/db/lolz/$i)" $(curl -s "https://mpr.hunterwittenborn.com/rpc/?v=5&type=info&arg=$i" | jq -C '.results[0].Version' | tr -d '"'); then
			mark_upgrade "$i"
		fi
		# if the upgradable package count is 0, then that means nothing to upgrade
		if [[ ${#upgradable[@]} -eq 0 ]]; then
			lolzy_message info "Nothing to upgrade"
		else
			echo "These packages can be upgraded:"
			echo -e "\t${upgradable[@]}"
			read -e -p "Do you want to continue? " choice
			if [[ "$choice" == [Yy]* ]]; then
				for i in ${upgradable[@]}; do
					if ! lolz install "$i"; then
						failed+=("$i")
					else
						lolzy_message info "Upgraded $i"
					fi
				done
				if [[ "${#failed[@]}" -ne 0 ]]; then
					lolzy_message error "These packages failed to upgrade: ${failed[@]}"
					exit 69
				fi
			else
				lolzy_message info "OK goodbye!"
				exit 69
			fi
		fi
	done
	;;
  search)
	INPUT="$2"
	SEARCH=$(curl -s "$MPR/rpc/?v=5&type=search&arg=$INPUT" | jq -C '.results[].Name' | tr -d '"')
	if ! [[ $SEARCH ]]; then
		lolzy_message error "Nope, no packages matching $INPUT"
		exit 69
	else
		echo "$SEARCH"
	fi
	;;
  list)
	ls -1aA /var/db/lolz
	exit
	;;
  help)
	help_function
	exit
	;;
  *)
	help_function
	exit 69
	;;
esac
