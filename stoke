#!/bin/bash
export LC_ALL=C
MPR='https://mpr.hunterwittenborn.com'
TMP="/tmp/stoke/"
if [[ ! -d /var/db/stoke ]]; then
	sudo mkdir -p /var/db/stoke
fi

# https://unix.stackexchange.com/a/567537/391386
version_greater_equal() {
	printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort
}

mark_upgrade() {
	upgradable+=("$1")
}

help_function() {
	echo "stoke -- an MPR helper"
	echo "stoke install (-y) -- installs a package"
	echo "  - with the -y option, stoke will not open your editor to edit packages"
	echo "stoke remove -- removes a package"
	echo "stoke upgrade (--git) -- upgrades packages"
	echo "  - with the --git option, stoke will trigger all git packages to be upgraded"
	echo "stoke search -- searches for package"
	echo "stoke list -- lists packages installed"
}

function stoke_message() {
	local MESSAGE_TYPE="${1}"
	local MESSAGE="${2}"
	local NC='\033[0m'
	local BRed='\033[1;31m'
	local BGreen='\033[1;32m'
	local BYellow='\033[1;33m'

	case ${MESSAGE_TYPE} in
		info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
		warn) echo -e "[${BYellow}*${NC}] WARN: ${MESSAGE}";;
		error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
		*) echo -e "[?] UNKNOWN: ${MESSAGE}";;
	esac
}

for i in {makedeb,wget,curl,gpg,git,jq}; do
	if ! command -v "$i" >/dev/null 2>&1; then
	  stoke_message error "$i does not exist or is not in PATH"
	  exit 1
	fi
done

case "${1}" in
  install)
	if ! curl --output /dev/null --silent --head --fail "$MPR"; then
		stoke_message error "Cannot reach $MPR"
		exit 1
	fi
	shift
	if [[ $1 == "-y" ]]; then
		export NOEDIT=1
		shift
	fi
	INPUT="$*"
	for i in $INPUT; do
		URL="$MPR/cgit/aur.git/plain/PKGBUILD?h=$i"
		if ! curl --output /dev/null --silent --head --fail "$URL"; then
			if apt-cache show "$i" >/dev/null 2>&1; then
				sudo apt-get install "$i"
			else
				stoke_message error "$i does not exist"
				exit 1
			fi
		fi
		# it's about to get rough
		# get list of deps
		deps=( "$(curl -s -H "stoke: 1.0" "$MPR/rpc/?v=5&type=info&arg=$i" | jq --raw-output '.results[].Depends | .[]')" )
		if [[ ${deps[*]} != "null" ]] && [[ ${deps[*]} != "" ]]; then
			# do a list of deps
			for z in "${deps[@]}"; do
				# if the apt search fails, go to MPR search, but if apt search works, add to list of apt deps
				if ! apt-cache show "$z" >/dev/null 2>&1; then
					# if the package exists in the MPR, add it to the mprdeps list
					if curl --output /dev/null --silent --head --fail "$MPR/cgit/aur.git/plain/PKGBUILD?h=$z"; then
						mprdeps+=("$z")
					# else fail
					else
						stoke_message error "$z is not a valid MPR or apt package"
						exit 1
					fi
				else
					aptdeps+=("$z")
				fi
			done
		fi
		makedeps=( "$(curl -s -H "stoke: 1.0" "$MPR/rpc/?v=5&type=info&arg=$i" | jq --raw-output '.results[].MakeDepends | .[]')" )
		if [[ ${makedeps[*]} != "null" ]] && [[ ${makedeps[*]} != "" ]]; then
			# do a list of deps
			for z in "${makedeps[@]}"; do
				# if the apt search fails, go to MPR search, but if apt search works, add to list of apt deps
				if ! apt-cache show "$z" >/dev/null 2>&1; then
					# if the package exists in the MPR, add it to the mprdeps list
					if curl --output /dev/null --silent --head --fail "$MPR/cgit/aur.git/plain/PKGBUILD?h=$z"; then
						mprdeps+=("$z")
					# else fail
					else
						stoke_message error "$z is not a valid MPR or apt package"
						exit 1
					fi
				else
					aptdeps+=("$z")
				fi
			done
		fi

		stoke_message info "Installing $i..."
		mkdir -p $TMP
		cd $TMP || stoke_message error "Could not cd into $TMP"; exit 1
		# this should be the fastest possible git clone, because it's cloning without commit history, and only cloning the master branch, instead of git taking more time to find out that the only branch is master.
		git clone --depth=1 --single-branch --branch=master "$MPR/$i.git"
		cd "$(basename "$i" .git)" || stoke_message info "Could not cd into directory" ; exit 1
		if [[ -z $NOEDIT ]]; then
			if [[ -n $EDITOR ]]; then
				$EDITOR PKGBUILD
			elif [[ -n $VISUAL ]]; then
				$VISUAL PKGBUILD
			else
				sensible-editor PKGBUILD || stoke_message warn "No editor found, continuing..."
			fi
		fi
		if [[ ${#mprdeps[@]} -ne 0 ]]; then
			stoke_message info "Installing MPR dependencies first"
			for j in ${mprdeps[*]}; do
				if ! stoke install "$j"; then
					stoke_message error "$j failed to install"
				fi
			done
		fi
		if [[ -z ${aptdeps[*]} ]]; then
			sudo apt-get install "${aptdeps[*]}" -y
		fi
		makedeb -sir --no-confirm
		rm -rf $TMP
		echo "$(curl -s -H "stoke: 1.0" "$MPR/rpc/?v=5&type=info&arg=$i" | jq --raw-output '.results[0].Version')" | sudo tee /var/db/stoke/"$i" >/dev/null
	done
	exit
	;;
  remove)
	INPUT="$2"
	if [[ -f /var/db/stoke/$INPUT ]]; then
		if ! sudo apt-get remove "$INPUT" -y; then
			stoke_message error "Failed to remove $INPUT"
			exit 1
		fi
		sudo rm -f /var/db/stoke/"$INPUT"
	else
		stoke_message error "$INPUT is not a valid MPR package"
		exit 1
	fi
	;;
  upgrade)
	shift
	if [[ $1 == "--git" ]]; then
		export REBUILDGIT=1
	fi
	# get a list of packages installed by stoke
	cd /var/db/stoke
	for i in *; do
		# check if the local version is less than the remote version and if so, mark it for upgrade
		if [[ -z $REBUILDGIT ]]; then
			if [[ $i == *-git ]]; then
				mark_upgrade "$i"
			fi
		else	
			if ! version_greater_equal "$(cat /var/db/stoke/"$i")" "$(curl -s -H "stoke: 1.0" "https://mpr.hunterwittenborn.com/rpc/?v=5&type=info&arg=$i" | jq --raw-output '.results[0].Version')"; then
				mark_upgrade "$i"
			fi
		fi
	done
	# if the upgradable package count is 0, then that means nothing to upgrade
	if [[ ${#upgradable[@]} -eq 0 ]]; then
		stoke_message info "Nothing to upgrade"
		exit
	else
		echo "These packages can be upgraded:"
		echo -e "\t${upgradable[*]}"
		read -e -p "Do you want to continue? " choice
		if [[ "$choice" == [Yy]* ]]; then
			for i in "${upgradable[@]}"; do
				if ! stoke install "$i"; then
					failed+=("$i")
				else
					stoke_message info "Upgraded $i"
				fi
			done
			if [[ "${#failed[@]}" -ne 0 ]]; then
				stoke_message error "These packages failed to upgrade: ${failed[*]}"
				exit 1
			fi
		else
			exit 1
		fi
	fi
	;;
  search)
	INPUT="$2"
	CURL=$(curl -s -H "stoke: 1.0" "$MPR/rpc/?v=5&type=search&arg=$INPUT")
	paste -d" " <(echo "$CURL" | jq --raw-output '.results[].Name') <(echo "$CURL" | jq --raw-output '.results[].Version')
	;;
  list)
	cd /var/db/stoke
	for i in *; do
		if dpkg -l | grep "$i" >/dev/null; then
			echo "$i"
		fi
	done
	exit
	;;
  update)
	if ! sudo curl -L https://github.com/Henryws/stoke/raw/master/stoke -o /usr/local/bin/stoke; then
		stoke_message error "Could not download stoke"
		exit 1
	fi
	if ! sudo chmod +x /usr/local/bin/stoke; then
		stoke_message error "Could not set permissions for stoke binary"
		exit 1
	fi
	exit
	;;
  help)
	help_function
	exit
	;;
  version)
	echo "1.0 Plasma"
	exit
	;;
  *)
	help_function
	exit 1
	;;
esac
