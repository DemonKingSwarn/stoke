#!/bin/bash
export LC_ALL=C
MPR='https://mpr.hunterwittenborn.com'
TMP="/tmp/stoke/"
if [[ ! -d /var/db/stoke ]]; then
	sudo mkdir -p /var/db/stoke
fi
# https://unix.stackexchange.com/a/567537/391386
version_greater_equal() {
	printf '%s\n%s\n' "$2" "$1" | sort --check=quiet --version-sort
}

mark_upgrade() {
	upgradable+=("$1")
}

help_function() {
	echo "stoke -- an MPR helper"
	echo "stoke install (-y) -- installs a package"
	echo "stoke remove -- removes a package"
	echo "stoke upgrade -- upgrades packages"
	echo "stoke search -- searches for package"
	echo "stoke list -- lists packages installed"
}

function stoke_message() {
	local MESSAGE_TYPE="${1}"
	local MESSAGE="${2}"
	local NC='\033[0m'
	local BRed='\033[1;31m'
	local BGreen='\033[1;32m'
	local BYellow='\033[1;33m'

	case ${MESSAGE_TYPE} in
		info) echo -e "[${BGreen}+${NC}] INFO: ${MESSAGE}";;
		warn) echo -e "[${BYellow}*${NC}] WARN: ${MESSAGE}";;
		error) echo -e "[${BRed}!${NC}] ERROR: ${MESSAGE}";;
		*) echo -e "[?] UNKNOWN: ${MESSAGE}";;
	esac
}

if ! command -v makedeb &>/dev/null; then
  lolzy_message error "makedeb does not exist or is not in PATH"
  exit 1
fi

case "${1}" in
  install)
  	if ! curl --output /dev/null --silent --head --fail "$MPR"; then
		stoke_message error "Cannot reach $MPR"
		exit 1
	fi
	shift
	if [[ $1 == "-y" ]]; then
		export NOEDIT=1
		shift
	fi
	INPUT="$*"
	for i in $INPUT; do
		URL="$MPR/cgit/aur.git/plain/PKGBUILD?h=$i"
		VERSION=$(curl -s "$MPR/rpc/?v=5&type=info&arg=$i" | jq -C '.results[0].Version' | tr -d '"') &
		if ! curl --output /dev/null --silent --head --fail "$URL"; then
			stoke_message error "$i does not exist"
			exit 1
		fi
		# it's about to get rough
		# get list of deps
		deps=( $(curl -s "$MPR/rpc/?v=5&type=info&arg=$i" | jq '.results[].Depends' | sed 's/\,//g' | sed 's/\[//g' | sed 's/\]//g' | tr -d '"' | tr -s ' ' | tr "\n" " " | tr -s ' ' | cut -d "%" -f 2) )
		if [[ $deps != "null" ]] && [[ $deps != "" ]]; then
			# do a list of deps
			for z in "${deps[@]}"; do
				# if the apt search fails, go to MPR search, but if apt search works, add to list of apt deps
				if ! apt-cache show "$z" >/dev/null; then
					# if the package exists in the MPR, add it to the mprdeps list
					if curl --output /dev/null --silent --head --fail "$MPR/cgit/aur.git/plain/PKGBUILD?h=$z"; then
						mprdeps+=("$z")
					# else fail
					else
						stoke_message error "$z is not a valid MPR or apt package"
						exit 1
					fi
				else
					aptdeps+=("$z")
				fi
			done
		fi
		makedeps=( $(curl -s "$MPR/rpc/?v=5&type=info&arg=$i" | jq '.results[].MakeDepends' | sed 's/\,//g' | sed 's/\[//g' | sed 's/\]//g' | tr -d '"' | tr -s ' ' | tr "\n" " " | tr -s ' ' | cut -d "%" -f 2) )
		if [[ $makedeps != "null" ]] && [[ $makedeps != "" ]]; then
			# do a list of deps
			for z in "${makedeps[@]}"; do
				# if the apt search fails, go to MPR search, but if apt search works, add to list of apt deps
				if ! apt-cache show "$z" >/dev/null; then
					# if the package exists in the MPR, add it to the mprdeps list
					if curl --output /dev/null --silent --head --fail "$MPR/cgit/aur.git/plain/PKGBUILD?h=$z"; then
						mprdeps+=("$z")
					# else fail
					else
						stoke_message error "$z is not a valid MPR or apt package"
						exit 1
					fi
				else
					aptdeps+=("$z")
				fi
			done
		fi
		if [[ ${#mprdeps[@]} -ne 0 ]]; then
			stoke_message info "Installing MPR dependencies first"
			for j in "${mprdeps[*]}"; do
				stoke install "$j"
			done
		fi
		if [[ -z ${aptdeps[*]} ]]; then
			sudo apt-get install "${aptdeps[@]}"
		fi
		stoke_message info "Installing $i..."
		mkdir -p $TMP
		cd $TMP
		git clone --depth=1 --single-branch --branch=master "$MPR/$i.git"
		cd $(basename $i .git)
		if [[ -z $NOEDIT ]]; then
			if [[ -n $EDITOR ]]; then
				$EDITOR PKGBUILD
			elif [[ -n $VISUAL ]]; then
				$VISUAL PKGBUILD
			else
				sensible-editor PKGBUILD || stoke_message warn "No editor found, continuing..."
			fi
		fi
		makedeb -si --no-confirm
		rm -rf $TMP &
		wait
		echo "$VERSION" | sudo tee /var/db/stoke/$i >/dev/null
	done
	exit
	;;
  remove)
	INPUT="$2"
	if [[ -f /var/db/stoke/$INPUT ]]; then
		sudo apt-get remove "$INPUT"
		sudo rm -f /var/db/stoke/"$INPUT"
	else
		stoke_message error "$INPUT is not a valid MPR package"
		exit 1
	fi
	;;
  upgrade)
	# get a list of packages installed by stoke
	for i in $(\ls -1aA /var/db/stoke); do
		VERSION=$(curl -s "https://mpr.hunterwittenborn.com/rpc/?v=5&type=info&arg=$i" | jq -C '.results[0].Version' | tr -d '"')
		# check if the local version is less than the remote version and if so, mark it for upgrade
		if ! version_greater_equal "$(cat /var/db/stoke/$i)" $VERSION; then
			mark_upgrade "$i"
		fi
	done
	# if the upgradable package count is 0, then that means nothing to upgrade
	if [[ ${#upgradable[@]} -eq 0 ]]; then
		stoke_message info "Nothing to upgrade"
		exit
	else
		echo "These packages can be upgraded:"
		echo -e "\t${upgradable[@]}"
		read -e -p "Do you want to continue? " choice
		if [[ "$choice" == [Yy]* ]]; then
			for i in ${upgradable[@]}; do
				if ! stoke install "$i"; then
					failed+=("$i")
				else
					stoke_message info "Upgraded $i"
				fi
			done
			if [[ "${#failed[@]}" -ne 0 ]]; then
				stoke_message error "These packages failed to upgrade: ${failed[@]}"
				exit 1
			fi
		else
			exit 1
		fi
	fi
	;;
  search)
	INPUT="$2"
	SEARCH=$(curl -s "$MPR/rpc/?v=5&type=search&arg=$INPUT" | jq -C '.results[].Name' | tr -d '"')
	if ! [[ $SEARCH ]]; then
		stoke_message error "No packages matching $INPUT"
		exit 1
	else
		echo "$SEARCH"
	fi
	;;
  list)
	ls -1aA /var/db/stoke
	exit
	;;
  help)
	help_function
	exit
	;;
  *)
	help_function
	exit 1
	;;
esac
